// Array data Struture : I have created my own DS of Array it has a lots of methods and properties but this data structure cant expand 
package dsa;
public class Array{
    public static void main(String[] args) {
  Array2 arr=new Array2(4);
  arr.append(10);
  arr.append(20);
  arr.append(30);
  arr.append(20);
  arr.delete(2);
  for (int i=0;i<arr.count();i++){
      System.out.println(arr.getValue(i)+ " ");
  }
        System.out.println(arr.getCapacity());
        System.out.println(arr.count());
    }
}

class Array2{
    private int lastIndex;
    private int [] ptr;
    public Array2(int size){
        lastIndex=-1;
        ptr=new int[size];
    }
    public void append(int data){
        try{
            ptr[lastIndex+1]=data;
            lastIndex++;
        }catch (ArrayIndexOutOfBoundsException e){
            System.out.println("Array is fully loaded"+ e.getMessage());
        }
    }
    public void insert(int index,int data){
        try{
            if (index<0 || index>lastIndex+1)
                throw new ArrayIndexOutOfBoundsException("Invalid index");
            for (int i = lastIndex;i>=index;i--){
                ptr[i+1]=ptr[i];
            }
            ptr[index]=data;
            lastIndex++;
        }catch (ArrayIndexOutOfBoundsException e){
            System.out.println(e.getMessage());
        }
    }
    public void edit(int index,int newdata){
        try{
            if (index<0 || index>lastIndex)
                throw new ArrayIndexOutOfBoundsException("Invalid index");
            ptr[index]=newdata;
        }catch (ArrayIndexOutOfBoundsException e){
            System.out.println(e.getMessage());
        }
    }
    public void delete(int index){

        try{
            if (index<0 || index>lastIndex)
                throw new ArrayIndexOutOfBoundsException("Invalid index");

            for (int i=index;i<lastIndex;i++){
                ptr[i]=ptr[i+1];
                lastIndex--;
            }
        }catch (ArrayIndexOutOfBoundsException e){
            System.out.println(e.getMessage());
        }
    }
    public int count(){
        return lastIndex+1;
    }
    public boolean isEmpty(){
        return lastIndex==-1;
    }
    public boolean isFull(){
        return lastIndex+1==ptr.length;
    }
    public int getValue(int index){
        try{
            if (index<0 || index>lastIndex)
                throw new ArrayIndexOutOfBoundsException("Invalid index exception");
            return ptr[index];
        }
        catch (ArrayIndexOutOfBoundsException e){
            System.out.println(e.getMessage());
        }
        return 0;
    }
    public int getCapacity(){
        return ptr.length;
    }

}
